import os
import tempfile
import configparser
import pytest
import splunk.clilib.bundle_paths as bundle_paths


class TestMerger(object):

    def setup_method(self, method):
        self.src = tempfile.NamedTemporaryFile(delete=False)
        self.dst = tempfile.NamedTemporaryFile(delete=False)

    def teardown_method(self, method):
        if(self.src and os.path.exists(self.src.name)):
            os.remove(self.src.name)
        if(self.dst and os.path.exists(self.dst.name)):
            os.remove(self.dst.name)

    def generate_file(self, file_type, extension, content_dict):
        file = self.src if file_type=="src" else self.dst
        file.name = file.name + extension
        conf_config = configparser.ConfigParser()
        for key in content_dict:
            conf_config[key] = content_dict[key]
        with open(file.name, 'w') as configfile:
            conf_config.write(configfile)

    @pytest.mark.parametrize(("src_dict", "dst_dict", "dryRun", "extension", "expected_result"), [
        # verifies default/app.conf and local/app.conf can be merged correctly
        # with local settings taking precedence
        (
            {'install' : {'is_configured': 'false', 'state': 'disabled'}},
            {'install': {'is_configured': 'true',
             'state': 'disabled', 'build': '1'},
             'id': {'version': '1.0.0'}},
            False,
            ".conf",
            {'default': {},
             'install': {'is_configured': 'true',
             'state': 'disabled', 'build': '1'},
             'id': {'version': '1.0.0'}}
        ),
        # verifies metadata/default.meta and metadata/local.meta can be merged correctly
        # with local settings taking precedence
        (
            {'props/sendmail/': {'export': 'system'}},
            {'viewstates': {'access': 'read : [ * ], write : [ * ]'},
             'default': {'demo': 'xyz'}},
            False,
            ".meta",
            {'props/sendmail/': {'export': 'system'},
             'viewstates': {'access': 'read : [ * ], write : [ * ]'},
             'default': {'demo': 'xyz'}}
        ),
    ])
    def test_merger(self, src_dict, dst_dict, dryRun, extension, expected_result):
        if src_dict and dst_dict:
            self.generate_file("src", extension, src_dict)
            self.generate_file("dst", extension, dst_dict)
            bundle_paths.Bundle._merger(self.src.name, self.dst.name, dryRun, extension)
            assert os.path.exists(self.dst.name)
            check_default_parser = configparser.ConfigParser()
            check_default_parser.read(self.dst.name)
            # check no contents are missing
            assert len(check_default_parser.sections()) == len(expected_result.keys())
            for sect in check_default_parser.sections():
                print(check_default_parser.items(sect))
                assert sect in expected_result # check no extra contents are present
                # check that all the contents match
                assert expected_result[sect] == dict(check_default_parser.items(sect))


